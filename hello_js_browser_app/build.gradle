apply plugin: 'org.jetbrains.kotlin.frontend'
apply plugin: 'kotlin2js'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version" // for now only compile configuration is supported
    compile 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.2'
    compile project(':hello_lib_js')
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version" // for now only compile configuration is supported
}

def outputDir = "${projectDir}/web"

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.suppressWarnings = true
    kotlinOptions.verbose = true
    kotlinOptions.main = "call"
    kotlinOptions.moduleKind = "umd"
}

//task assembleJs(type: Sync) {
//    configurations.compile.each { File file ->
//        from(zipTree(file.absolutePath), {
//            includeEmptyDirs = false
//            include { fileTreeElement ->
//                def path = fileTreeElement.path
//                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
//                        !path.startsWith("META-INF/"))
//            }
//        })
//    }
//    from compileKotlin2Js.destinationDir
//    into "${outputDir}/web_modules"
//    dependsOn classes
//}

//task assembleResources(type: Sync) {
//    from "src/main/resources" into "web"
//}

//assemble.dependsOn assembleJs
//assembleJs.dependsOn assembleResources

kotlinFrontend {
    downloadNodeJsVersion = "latest"
    
    webpackBundle {
        bundleName = "main"
        sourceMapEnabled = true  // enable/disable source maps
        contentPath = file('src/main/web') // a file that represents a directory to be served by dev server)
        publicPath = "/"  // web prefix
        port = 8088   // dev server port
        proxyUrl = "" // URL to be proxied, useful to proxy backend webserver
        stats = "errors-only"  // log level
    }
}

clean.doFirst() {
    delete "$outputDir"
}